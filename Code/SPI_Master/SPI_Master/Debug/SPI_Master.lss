
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000650  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Int>:
}


void SPI_Int()
{
	    DDRB|=(1<<SPI_MOSI)|(1<<SPI_SCK);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6a       	ori	r24, 0xA0	; 160
  70:	87 bb       	out	0x17, r24	; 23
	    DDRB&=~(1<<SPI_MISO);
  72:	be 98       	cbi	0x17, 6	; 23
	    DDRC|=(1<<SPI_SS_1);
  74:	a0 9a       	sbi	0x14, 0	; 20
	    //EN SPI  & EN_Master  & Prescaler Foc/4
	    SPCR|=(1<<MSTR)|(1<<SPE);
  76:	8d b1       	in	r24, 0x0d	; 13
  78:	80 65       	ori	r24, 0x50	; 80
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <SPI_M_TxRx>:
	
}
unsigned char SPI_M_TxRx(unsigned char data )
{
	SPDR=data ;
  7e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <SPI_M_TxRx+0x2>
	return SPDR;
  84:	8f b1       	in	r24, 0x0f	; 15
  86:	08 95       	ret

00000088 <main>:
void SPI_Int();
unsigned char SPI_M_TxRx(unsigned char data );

int main(void)
{
	SPI_Int();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Int>
	Slave_EN(PORTC,SPI_SS_1);
  8c:	a8 98       	cbi	0x15, 0	; 21
	DDRC|=(1<<LED);
  8e:	a5 9a       	sbi	0x14, 5	; 20
    while (1) 
    {
		
		if (SPI_M_TxRx(0X01)==0XFF)
		{
			PORTC^=(1<<LED);
  90:	c0 e2       	ldi	r28, 0x20	; 32
	Slave_EN(PORTC,SPI_SS_1);
	DDRC|=(1<<LED);
    while (1) 
    {
		
		if (SPI_M_TxRx(0X01)==0XFF)
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 3f 00 	call	0x7e	; 0x7e <SPI_M_TxRx>
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	19 f4       	brne	.+6      	; 0xa2 <main+0x1a>
		{
			PORTC^=(1<<LED);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8c 27       	eor	r24, r28
  a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	83 ed       	ldi	r24, 0xD3	; 211
  a6:	90 e3       	ldi	r25, 0x30	; 48
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x20>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x2a>
  b2:	00 00       	nop
  b4:	ee cf       	rjmp	.-36     	; 0x92 <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
