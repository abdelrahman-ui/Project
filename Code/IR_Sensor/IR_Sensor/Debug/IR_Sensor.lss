
IR_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000212  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5a  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073c  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000546  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ec  00000000  00000000  0000208d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  7a:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	c1 98       	cbi	0x18, 1	; 24
  90:	c3 9a       	sbi	0x18, 3	; 24
  92:	35 e3       	ldi	r19, 0x35	; 53
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_Command+0x12>
  98:	00 00       	nop
  9a:	c3 98       	cbi	0x18, 3	; 24
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	ff e1       	ldi	r31, 0x1F	; 31
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Command+0x24>
  a6:	00 00       	nop
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	c3 9a       	sbi	0x18, 3	; 24
  ba:	35 e0       	ldi	r19, 0x05	; 5
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x3a>
  c0:	00 00       	nop
  c2:	c3 98       	cbi	0x18, 3	; 24
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_Init>:
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	87 bb       	out	0x17, r24	; 23
  da:	c2 98       	cbi	0x18, 2	; 24
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <LCD_Init+0x10>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_Init+0x1a>
  ec:	00 00       	nop
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 112:	08 95       	ret

00000114 <LCD_Char>:
 114:	9b b3       	in	r25, 0x1b	; 27
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	28 2f       	mov	r18, r24
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	92 2b       	or	r25, r18
 11e:	9b bb       	out	0x1b, r25	; 27
 120:	c1 9a       	sbi	0x18, 1	; 24
 122:	c3 9a       	sbi	0x18, 3	; 24
 124:	35 e3       	ldi	r19, 0x35	; 53
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Char+0x12>
 12a:	00 00       	nop
 12c:	c3 98       	cbi	0x18, 3	; 24
 12e:	ef e1       	ldi	r30, 0x1F	; 31
 130:	f3 e0       	ldi	r31, 0x03	; 3
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Char+0x1e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Char+0x24>
 138:	00 00       	nop
 13a:	2b b3       	in	r18, 0x1b	; 27
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	f0 e1       	ldi	r31, 0x10	; 16
 140:	8f 9f       	mul	r24, r31
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	82 2b       	or	r24, r18
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	c3 9a       	sbi	0x18, 3	; 24
 14c:	35 e3       	ldi	r19, 0x35	; 53
 14e:	3a 95       	dec	r19
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Char+0x3a>
 152:	00 00       	nop
 154:	c3 98       	cbi	0x18, 3	; 24
 156:	8f e5       	ldi	r24, 0x5F	; 95
 158:	9d e6       	ldi	r25, 0x6D	; 109
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Char+0x46>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Char+0x4c>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_String>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	88 81       	ld	r24, Y
 16c:	88 23       	and	r24, r24
 16e:	31 f0       	breq	.+12     	; 0x17c <LCD_String+0x18>
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Char>
 176:	89 91       	ld	r24, Y+
 178:	81 11       	cpse	r24, r1
 17a:	fb cf       	rjmp	.-10     	; 0x172 <LCD_String+0xe>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <LCD_Clear>:
/*

*/
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9f e1       	ldi	r25, 0x1F	; 31
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Clear+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Clear+0x10>
 192:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 19a:	08 95       	ret

0000019c <main>:
#include "LCD_4_BIT.h"
#include "bit_math.h"

int main(void)
{
    LCD_Init();
 19c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Init>
	CLR_BIT(DDRD,0);
 1a0:	88 98       	cbi	0x11, 0	; 17
    while (1) 
    {
		if(GET_BIT(PIND,0)==1)
 1a2:	80 9b       	sbis	0x10, 0	; 16
 1a4:	1a c0       	rjmp	.+52     	; 0x1da <main+0x3e>
		{
			LCD_Clear();
 1a6:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Clear>
			LCD_Command(0x80);
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String("IR Sense ");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
			LCD_Command(0xc0);
 1b8:	80 ec       	ldi	r24, 0xC0	; 192
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String("obstacle");
 1be:	8a e6       	ldi	r24, 0x6A	; 106
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	87 ea       	ldi	r24, 0xA7	; 167
 1ca:	91 e6       	ldi	r25, 0x61	; 97
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x30>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x3a>
 1d6:	00 00       	nop
 1d8:	e4 cf       	rjmp	.-56     	; 0x1a2 <main+0x6>
			_delay_ms(2000);	
			
		}
		else
		{
			LCD_Clear();
 1da:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Clear>
			LCD_Command(0x80);
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String("IR Sense ");
 1e4:	80 e6       	ldi	r24, 0x60	; 96
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
			LCD_Command(0xc0);
 1ec:	80 ec       	ldi	r24, 0xC0	; 192
 1ee:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
			LCD_String("Nothing");		
 1f2:	83 e7       	ldi	r24, 0x73	; 115
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	87 ea       	ldi	r24, 0xA7	; 167
 1fe:	91 e6       	ldi	r25, 0x61	; 97
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x64>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x6e>
 20a:	00 00       	nop
 20c:	ca cf       	rjmp	.-108    	; 0x1a2 <main+0x6>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
