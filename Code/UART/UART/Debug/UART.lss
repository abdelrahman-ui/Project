
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000871  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000445  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025c  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  7a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_Int>:

void UART_Int()
{
	
	//ENable Transmit And Resiver 
	UCSRB|=(1<<RXEN)|(1<<TXEN);
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	88 61       	ori	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	//Register Select  8_bit 
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); 
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_Count;				//103 
  8e:	87 e6       	ldi	r24, 0x67	; 103
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <UART_Send>:
}

void UART_Send( char data)
{
	 while (!(UCSRA&(1<<UDRE)));
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <UART_Send>
	UDR=data;
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <UART_Send_String>:
}
void UART_Send_String( char *string)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
      short i =0;
	 while(string[i]!='\0')
  a2:	88 81       	ld	r24, Y
  a4:	88 23       	and	r24, r24
  a6:	31 f0       	breq	.+12     	; 0xb4 <UART_Send_String+0x18>
  a8:	21 96       	adiw	r28, 0x01	; 1
	 {
		    UART_Send(string[i]);
  aa:	0e 94 4a 00 	call	0x94	; 0x94 <UART_Send>
	UDR=data;
}
void UART_Send_String( char *string)
{
      short i =0;
	 while(string[i]!='\0')
  ae:	89 91       	ld	r24, Y+
  b0:	81 11       	cpse	r24, r1
  b2:	fb cf       	rjmp	.-10     	; 0xaa <UART_Send_String+0xe>
	 {
		    UART_Send(string[i]);
			i++;
	 }
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <UART_Receive>:

unsigned char  UART_Receive()
{
	//make sure you have data 
	while(!(UCSRA&(1<<RXC)));
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART_Receive>
	return UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
  c0:	08 95       	ret

000000c2 <main>:
unsigned char  UART_Receive();
 void UART_Send_String( char *string);
 
int main(void)
{
   UART_Int();
  c2:	0e 94 41 00 	call	0x82	; 0x82 <UART_Int>
   UART_Send_String("Abdo_Magdy\r\n");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <UART_Send_String>
   DDRC|=(1<<PC2);
  ce:	a2 9a       	sbi	0x14, 2	; 20
   char Recive_data;
   DDRC|=(1<<Stepper_Leg_6)|(1<<Stepper_Leg_5)|(1<<Stepper_Leg_3)|(1<<Stepper_Leg_4);
  d0:	84 b3       	in	r24, 0x14	; 20
  d2:	88 67       	ori	r24, 0x78	; 120
  d4:	84 bb       	out	0x14, r24	; 20
   DDRD|=(1<<EN_1)|(1<<EN_2);
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	80 63       	ori	r24, 0x30	; 48
  da:	81 bb       	out	0x11, r24	; 17
   PORTD|=(1<<EN_1)|(1<<EN_2);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	80 63       	ori	r24, 0x30	; 48
  e0:	82 bb       	out	0x12, r24	; 18
    while (1) 
    {
		
	 
		Recive_data=UART_Receive();
  e2:	0e 94 5d 00 	call	0xba	; 0xba <UART_Receive>
		switch(Recive_data)
  e6:	82 33       	cpi	r24, 0x32	; 50
  e8:	b9 f0       	breq	.+46     	; 0x118 <main+0x56>
  ea:	18 f4       	brcc	.+6      	; 0xf2 <main+0x30>
  ec:	81 33       	cpi	r24, 0x31	; 49
  ee:	31 f0       	breq	.+12     	; 0xfc <main+0x3a>
  f0:	f8 cf       	rjmp	.-16     	; 0xe2 <main+0x20>
  f2:	83 33       	cpi	r24, 0x33	; 51
  f4:	f9 f0       	breq	.+62     	; 0x134 <main+0x72>
  f6:	84 33       	cpi	r24, 0x34	; 52
  f8:	59 f1       	breq	.+86     	; 0x150 <main+0x8e>
  fa:	f3 cf       	rjmp	.-26     	; 0xe2 <main+0x20>
		{
			case '1' :
				 Stepper_Motor(1);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 b6 00 	call	0x16c	; 0x16c <Stepper_Motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	87 ea       	ldi	r24, 0xA7	; 167
 106:	91 e6       	ldi	r25, 0x61	; 97
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x46>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x50>
 112:	00 00       	nop
				 _delay_ms(2000);
				 PORTC=0x00;
 114:	15 ba       	out	0x15, r1	; 21
			break;
 116:	e5 cf       	rjmp	.-54     	; 0xe2 <main+0x20>
			
			case '2' :
				Stepper_Motor(2);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 b6 00 	call	0x16c	; 0x16c <Stepper_Motor>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	87 ea       	ldi	r24, 0xA7	; 167
 122:	91 e6       	ldi	r25, 0x61	; 97
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x62>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x6c>
 12e:	00 00       	nop
				_delay_ms(2000);
				PORTC=0x00;
 130:	15 ba       	out	0x15, r1	; 21
			break;
 132:	d7 cf       	rjmp	.-82     	; 0xe2 <main+0x20>
			
			case '3' :
				Stepper_Motor(3);
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 b6 00 	call	0x16c	; 0x16c <Stepper_Motor>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	87 ea       	ldi	r24, 0xA7	; 167
 13e:	91 e6       	ldi	r25, 0x61	; 97
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x7e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x88>
 14a:	00 00       	nop
				_delay_ms(2000);
				PORTC=0x00;
 14c:	15 ba       	out	0x15, r1	; 21
			break;
 14e:	c9 cf       	rjmp	.-110    	; 0xe2 <main+0x20>
			
			case '4' :
				Stepper_Motor(4);
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 b6 00 	call	0x16c	; 0x16c <Stepper_Motor>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	87 ea       	ldi	r24, 0xA7	; 167
 15a:	91 e6       	ldi	r25, 0x61	; 97
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x9a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xa4>
 166:	00 00       	nop
				_delay_ms(2000);
				PORTC=0x00;
 168:	15 ba       	out	0x15, r1	; 21
			break;									
 16a:	bb cf       	rjmp	.-138    	; 0xe2 <main+0x20>

0000016c <Stepper_Motor>:
#include <avr/io.h>
#include <util/delay.h>

void Stepper_Motor(unsigned char Mode)
{
	switch(Mode)
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	71 f0       	breq	.+28     	; 0x18c <Stepper_Motor+0x20>
 170:	18 f4       	brcc	.+6      	; 0x178 <Stepper_Motor+0xc>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	31 f0       	breq	.+12     	; 0x182 <Stepper_Motor+0x16>
 176:	08 95       	ret
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	69 f0       	breq	.+26     	; 0x196 <Stepper_Motor+0x2a>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	81 f0       	breq	.+32     	; 0x1a0 <Stepper_Motor+0x34>
 180:	08 95       	ret
	{
		case 1 :
		
		PORTC |= (1<<Stepper_Leg_5)|(1<<Stepper_Leg_6);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	80 66       	ori	r24, 0x60	; 96
 186:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<Stepper_Leg_3)|(1<<Stepper_Leg_4);
 188:	ab 98       	cbi	0x15, 3	; 21
		
		break ;
 18a:	08 95       	ret
		
		case 2 :
		PORTC |= (1<<Stepper_Leg_5)|(1<<Stepper_Leg_4);
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	80 63       	ori	r24, 0x30	; 48
 190:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<Stepper_Leg_6)|(1<<Stepper_Leg_3);
 192:	ae 98       	cbi	0x15, 6	; 21
		break ;
 194:	08 95       	ret
		
		case 3 :
		PORTC |= (1<<Stepper_Leg_3)|(1<<Stepper_Leg_4);
 196:	85 b3       	in	r24, 0x15	; 21
 198:	88 61       	ori	r24, 0x18	; 24
 19a:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<Stepper_Leg_5)|(1<<Stepper_Leg_6);
 19c:	ad 98       	cbi	0x15, 5	; 21
		break ;
 19e:	08 95       	ret
		
		case 4 :
		PORTC |= (1<<Stepper_Leg_3)|(1<<Stepper_Leg_6);
 1a0:	85 b3       	in	r24, 0x15	; 21
 1a2:	88 64       	ori	r24, 0x48	; 72
 1a4:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<Stepper_Leg_4)|(1<<Stepper_Leg_5);
 1a6:	ac 98       	cbi	0x15, 4	; 21
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
