
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ef  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bd  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000364  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5d 00 	call	0xba	; 0xba <main>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TWI_S_Init>:
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
	}
}
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	82 b9       	out	0x02, r24	; 2
  80:	08 95       	ret

00000082 <TWI_read_slave>:

unsigned char TWI_read_slave(void)
{
	// Clear TWI interrupt flag,Get acknowlegement, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  82:	84 ec       	ldi	r24, 0xC4	; 196
  84:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));	// Wait for TWINT flag
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <TWI_read_slave+0x4>
	while((TWSR & 0xF8)!=0x80);		// Wait for acknowledgement
  8c:	81 b1       	in	r24, 0x01	; 1
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	80 38       	cpi	r24, 0x80	; 128
  92:	e1 f7       	brne	.-8      	; 0x8c <TWI_read_slave+0xa>
	recv_data=TWDR;					// Get value from TWDR
  94:	83 b1       	in	r24, 0x03	; 3
  96:	28 2f       	mov	r18, r24
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
  9e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	return recv_data;				// send the receive value on PORTB
}
  a2:	08 95       	ret

000000a4 <TWI_match_read_slave>:
void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  a4:	94 ec       	ldi	r25, 0xC4	; 196
	return recv_data;				// send the receive value on PORTB
}

void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <TWI_match_read_slave+0xc>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
  a8:	96 bf       	out	0x36, r25	; 54
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
  aa:	06 b6       	in	r0, 0x36	; 54
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <TWI_match_read_slave+0x6>
	return recv_data;				// send the receive value on PORTB
}

void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
	while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
  b0:	81 b1       	in	r24, 0x01	; 1
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	80 36       	cpi	r24, 0x60	; 96
  b6:	c1 f7       	brne	.-16     	; 0xa8 <TWI_match_read_slave+0x4>
	{
		// Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
		while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
	}
  b8:	08 95       	ret

000000ba <main>:

#include "I2C_Slave.h"

int main(void)
{
	TWI_S_Init();
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <TWI_S_Init>
	DDRC|=(1<<PC4);
  be:	a4 9a       	sbi	0x14, 4	; 20
	while(1)
	{
		TWI_match_read_slave();	//Function to match the slave address and slave dirction bit(read)
  c0:	0e 94 52 00 	call	0xa4	; 0xa4 <TWI_match_read_slave>
		if(TWI_read_slave()=='m')	// Function to read data
  c4:	0e 94 41 00 	call	0x82	; 0x82 <TWI_read_slave>
  c8:	8d 36       	cpi	r24, 0x6D	; 109
  ca:	d1 f7       	brne	.-12     	; 0xc0 <main+0x6>
			PORTC|=(1<<PC4);
  cc:	ac 9a       	sbi	0x15, 4	; 21
  ce:	f8 cf       	rjmp	.-16     	; 0xc0 <main+0x6>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
