
T0_FPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000652  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define		EN		3
int main(void)
{
	
	//Dir 
	DDRB|=(1<<Dir_1)|(1<<Dir_2)|(1<<EN);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 63       	ori	r24, 0x38	; 56
  70:	87 bb       	out	0x17, r24	; 23
    //The Mode of The Timer 0
	//PORT
	PORTB|=(1<<Dir_1);
  72:	c5 9a       	sbi	0x18, 5	; 24
	//FPWM & No prescaler & NON_inerting & INVERTING 
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<COM00);
  74:	83 b7       	in	r24, 0x33	; 51
  76:	89 67       	ori	r24, 0x79	; 121
  78:	83 bf       	out	0x33, r24	; 51
	//Enable Interrput 
	TIMSK|=(1<<TOV0)|(1<<OCIE0);
  7a:	89 b7       	in	r24, 0x39	; 57
  7c:	83 60       	ori	r24, 0x03	; 3
  7e:	89 bf       	out	0x39, r24	; 57
	//Global Isr
	sei();
  80:	78 94       	sei
	OCR0=255;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8c bf       	out	0x3c, r24	; 60

#define		Dir_1	5
#define		Dir_2	4
#define		EN		3
int main(void)
{
  86:	8f e7       	ldi	r24, 0x7F	; 127
	OCR0=255;
    while (1) 
    {
		for (int i=127;i<255;i++)
		{
			OCR0=i; //oc0 pin = LED GO HIGH
  88:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	ef e1       	ldi	r30, 0x1F	; 31
  8c:	fe e4       	ldi	r31, 0x4E	; 78
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	8f 5f       	subi	r24, 0xFF	; 255
	//Global Isr
	sei();
	OCR0=255;
    while (1) 
    {
		for (int i=127;i<255;i++)
  98:	8f 3f       	cpi	r24, 0xFF	; 255
  9a:	b1 f7       	brne	.-20     	; 0x88 <main+0x1c>
			OCR0=i; //oc0 pin = LED GO HIGH
			_delay_ms(5);
		}
		for (int i=255;i>127;i--)
		{
			OCR0=i; //oc0 pin = LED
  9c:	8c bf       	out	0x3c, r24	; 60
  9e:	ef e1       	ldi	r30, 0x1F	; 31
  a0:	fe e4       	ldi	r31, 0x4E	; 78
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
  aa:	81 50       	subi	r24, 0x01	; 1
		for (int i=127;i<255;i++)
		{
			OCR0=i; //oc0 pin = LED GO HIGH
			_delay_ms(5);
		}
		for (int i=255;i>127;i--)
  ac:	8f 37       	cpi	r24, 0x7F	; 127
  ae:	b1 f7       	brne	.-20     	; 0x9c <main+0x30>
  b0:	ea cf       	rjmp	.-44     	; 0x86 <main+0x1a>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
