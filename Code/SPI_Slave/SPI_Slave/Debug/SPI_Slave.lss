
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cb  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Int>:
    }
}

void SPI_Int()
{
	DDRB|=(1<<SPI_MISO);
  6c:	be 9a       	sbi	0x17, 6	; 23
	DDRB&=~(1<<SPI_MOSI)&(1<<SPI_SS);
  6e:	87 b3       	in	r24, 0x17	; 23
  70:	80 71       	andi	r24, 0x10	; 16
  72:	87 bb       	out	0x17, r24	; 23
	//EN SPI    & Prescaler Foc/4
	SPCR|=(1<<SPE);
  74:	6e 9a       	sbi	0x0d, 6	; 13
  76:	08 95       	ret

00000078 <SPI_S_TxRx>:
	
}
unsigned char SPI_S_TxRx(unsigned char data )
{
	SPDR=data ;
  78:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <SPI_S_TxRx+0x2>
	return SPDR;
  7e:	8f b1       	in	r24, 0x0f	; 15
  80:	08 95       	ret

00000082 <main>:

unsigned char SPI_S_TxRx(unsigned char data );
void SPI_Int();
int main(void)
{
	SPI_Int();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Int>
    DDRC|=(1<<LED);
  86:	a0 9a       	sbi	0x14, 0	; 20
    while (1) 
    {
		if(SPI_S_TxRx(0XFF)==0X01)
		{
			PORTC^=(1<<LED);
  88:	c1 e0       	ldi	r28, 0x01	; 1
{
	SPI_Int();
    DDRC|=(1<<LED);
    while (1) 
    {
		if(SPI_S_TxRx(0XFF)==0X01)
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	0e 94 3c 00 	call	0x78	; 0x78 <SPI_S_TxRx>
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x8>
		{
			PORTC^=(1<<LED);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 27       	eor	r24, r28
  98:	85 bb       	out	0x15, r24	; 21
  9a:	f7 cf       	rjmp	.-18     	; 0x8a <main+0x8>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
