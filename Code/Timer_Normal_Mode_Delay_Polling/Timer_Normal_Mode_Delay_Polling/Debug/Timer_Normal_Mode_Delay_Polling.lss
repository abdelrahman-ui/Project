
Timer_Normal_Mode_Delay_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a9  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000511  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000220  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile unsigned char count0 = 0 ;
volatile unsigned char count1 = 0 ;
volatile unsigned char count2 = 0 ;
int main(void)
{
	DDRD|=(1<<5)|(1<<6)|(1<<7);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 6e       	ori	r24, 0xE0	; 224
  80:	81 bb       	out	0x11, r24	; 17
	//Prescaler
	TCCR0|=(1<<CS01)|(1<<CS00);
  82:	83 b7       	in	r24, 0x33	; 51
  84:	83 60       	ori	r24, 0x03	; 3
  86:	83 bf       	out	0x33, r24	; 51
		count0++;
		count1++;
		count2++;
		if(count0==200)
		{
			PORTD^=(1<<PIND5);
  88:	20 e2       	ldi	r18, 0x20	; 32
		//	_delay_ms(90);
			count0=0;
		}
		if(count1==250)
		{
			PORTD^=(1<<PIND6);
  8a:	90 e4       	ldi	r25, 0x40	; 64
	//global
	//sei();
	/* Replace with your application code */
	while (1)
	{
		while(!(TIFR & (1<<TOV0)));
  8c:	08 b6       	in	r0, 0x38	; 56
  8e:	00 fe       	sbrs	r0, 0
  90:	fd cf       	rjmp	.-6      	; 0x8c <main+0x10>
		TIFR|=(1<<TOV0);				//CLEAR FLAG
  92:	88 b7       	in	r24, 0x38	; 56
  94:	81 60       	ori	r24, 0x01	; 1
  96:	88 bf       	out	0x38, r24	; 56
		count0++;
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count0>
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count0>
		count1++;
  a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count1>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count1>
		count2++;
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(count0==200)
  b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count0>
  ba:	88 3c       	cpi	r24, 0xC8	; 200
  bc:	29 f4       	brne	.+10     	; 0xc8 <main+0x4c>
		{
			PORTD^=(1<<PIND5);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	82 27       	eor	r24, r18
  c2:	82 bb       	out	0x12, r24	; 18
		//	_delay_ms(90);
			count0=0;
  c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count0>
		}
		if(count1==250)
  c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count1>
  cc:	8a 3f       	cpi	r24, 0xFA	; 250
  ce:	29 f4       	brne	.+10     	; 0xda <main+0x5e>
		{
			PORTD^=(1<<PIND6);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	89 27       	eor	r24, r25
  d4:	82 bb       	out	0x12, r24	; 18
			//_delay_ms(90);
			count1=0;
  d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count1>
		}
		if(count2==100)
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  de:	84 36       	cpi	r24, 0x64	; 100
  e0:	a9 f6       	brne	.-86     	; 0x8c <main+0x10>
		{
			PORTD^=(1<<PIND7);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	80 58       	subi	r24, 0x80	; 128
  e6:	82 bb       	out	0x12, r24	; 18
		//	_delay_ms(90);
			count2=0;
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ec:	cf cf       	rjmp	.-98     	; 0x8c <main+0x10>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
