
Timer0_Normal_Mode_generat_Wave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000018c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cb  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000529  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000220  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define LED_7	7

int main(void)
{
	//The OC0 must be Set dir out if you want To Generat Wave
	DDRB|=(1<<PB3)  ;
  7c:	bb 9a       	sbi	0x17, 3	; 23
	//To be toggle	& No Prescaler
     TCCR0|=(1<<COM00)|(1<<CS00)|(1<<CS02);								
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	85 61       	ori	r24, 0x15	; 21
  82:	83 bf       	out	0x33, r24	; 51
	//Enable the flag ISR of ovf And of ocr flag
	TIMSK|=(1<<OCIE0);							//NOT Need here 
  84:	89 b7       	in	r24, 0x39	; 57
  86:	82 60       	ori	r24, 0x02	; 2
  88:	89 bf       	out	0x39, r24	; 57
	//Global isr 
	sei();
  8a:	78 94       	sei
	//put the number of puls which i need to be combared with tcnt
	OCR0 = 127	 ;							//0:127=128
  8c:	8f e7       	ldi	r24, 0x7F	; 127
  8e:	8c bf       	out	0x3c, r24	; 60
			PORTD ^=(1<<LED_7);
			OCR_Count=0;
		}
		if (OCR_Count2==((10*977)/2))        //m4 rady y3mel 977 leh m4 3aref
		{
			PORTD ^=(1<<LED_5);
  90:	20 e2       	ldi	r18, 0x20	; 32
    {
		/*if(OVF_Count==976)
		{
			TIMSK|=(1<<OCIE0);
		}*/
		if (OCR_Count==977)        //m4 rady y3mel 977 leh m4 3aref
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OCR_Count>
  96:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <OCR_Count+0x1>
  9a:	81 3d       	cpi	r24, 0xD1	; 209
  9c:	93 40       	sbci	r25, 0x03	; 3
  9e:	39 f4       	brne	.+14     	; 0xae <main+0x32>
		{
			PORTD ^=(1<<LED_7);
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	80 58       	subi	r24, 0x80	; 128
  a4:	82 bb       	out	0x12, r24	; 18
			OCR_Count=0;
  a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <OCR_Count+0x1>
  aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <OCR_Count>
		}
		if (OCR_Count2==((10*977)/2))        //m4 rady y3mel 977 leh m4 3aref
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  b6:	85 31       	cpi	r24, 0x15	; 21
  b8:	93 41       	sbci	r25, 0x13	; 19
  ba:	59 f7       	brne	.-42     	; 0x92 <main+0x16>
		{
			PORTD ^=(1<<LED_5);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	82 27       	eor	r24, r18
  c0:	82 bb       	out	0x12, r24	; 18
			OCR_Count2=0;
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ca:	e3 cf       	rjmp	.-58     	; 0x92 <main+0x16>

000000cc <__vector_10>:
    }
}


ISR(TIMER0_COMP_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	OCR_Count++;
  da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OCR_Count>
  de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <OCR_Count+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <OCR_Count+0x1>
  e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OCR_Count>
	OCR_Count2++;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTD^=(1<<LED_6); //debugging by led if it come in to comp or not
  fe:	92 b3       	in	r25, 0x12	; 18
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	89 27       	eor	r24, r25
 104:	82 bb       	out	0x12, r24	; 18
	
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
