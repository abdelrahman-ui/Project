
ISR_INT0_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000014e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000620  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000591  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#define LED 7
volatile unsigned char flag=0 ;
int main(void)
{
	DDRD|=(1<<LED);
  7c:	8f 9a       	sbi	0x11, 7	; 17
	//CONFIGUR INT0
		GICR|=(1<<INT0);				//ENABLE INTO
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8b bf       	out	0x3b, r24	; 59
    //TYPE OF ISR
	 MCUCR|=(1<<ISC00)|(1<<ISC01);       //RISING EDGE
  84:	85 b7       	in	r24, 0x35	; 53
  86:	83 60       	ori	r24, 0x03	; 3
  88:	85 bf       	out	0x35, r24	; 53
	 //ENABLE GLOBAL ISR
	  sei();
  8a:	78 94       	sei
	  PORTD&=~(1<<LED);
  8c:	97 98       	cbi	0x12, 7	; 18
    while (1) 
    {
		if (flag==1)
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x12>
		{
			PORTD^=(1<<LED);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	80 58       	subi	r24, 0x80	; 128
  9a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	81 ee       	ldi	r24, 0xE1	; 225
  a0:	94 e0       	ldi	r25, 0x04	; 4
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x26>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x30>
  ac:	00 00       	nop
			_delay_ms(100);
			flag=0;
  ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  b2:	ed cf       	rjmp	.-38     	; 0x8e <main+0x12>

000000b4 <__vector_1>:
			
    }
}

ISR (INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	flag ++;
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
